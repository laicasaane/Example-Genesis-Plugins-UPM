//------------------------------------------------------------------------------
// <auto-generated>
//		This code was generated by a tool (Genesis v2.3.2.0).
//
//
//		Changes to this file may cause incorrect behavior and will be lost if
//		the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using Examples.Common.Unions;

namespace Examples
{
partial class ExampleBehaviour {

    [StructLayout(LayoutKind.Explicit, Pack = 1)]
    partial struct ExampleUnionA : IUnion, IEquatable<ExampleUnionA>
    {
        public enum Fields : byte
        {
            Item1,
            Item2,
        }

        [FieldOffset(0)]
        public readonly Fields Field;

        [FieldOffset(1)]
        public readonly int Item1;

        [FieldOffset(1)]
        public readonly float Item2;

        public ExampleUnionA(int value)
        {
            Field = Fields.Item1;

            Item2 = default;

            Item1 = value;
        }

        public ExampleUnionA(in int value)
        {
            Field = Fields.Item1;

            Item2 = default;

            Item1 = value;
        }

        public ExampleUnionA(float value)
        {
            Field = Fields.Item2;

            Item1 = default;

            Item2 = value;
        }

        public ExampleUnionA(in float value)
        {
            Field = Fields.Item2;

            Item1 = default;

            Item2 = value;
        }

        public ExampleUnionA(Fields type)
        {
            Field = type;

            Item1 = default;
            Item2 = default;
        }

        public bool TryGet(out int value)
        {
            if (Field != Fields.Item1)
            {
                value = default;
                return false;
            }

            value = Item1;
            return true;
        }

        public bool TryGet(out float value)
        {
            if (Field != Fields.Item2)
            {
                value = default;
                return false;
            }

            value = Item2;
            return true;
        }

        public System.Type GetUnderlyingType()
        {
            if (Field == Fields.Item1)
                return Item1.GetType();

            if (Field == Fields.Item2)
                return Item2.GetType();

            return GetType();
        }

        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(Field);

            if (Field == Fields.Item1)
                hash.Add(Item1);

            if (Field == Fields.Item2)
                hash.Add(Item2);

            return hash.ToHashCode();
        }

        public override bool Equals(object obj)
            => obj is ExampleUnionA other && Equals(this, other);

        public bool Equals(ExampleUnionA other)
            => Equals(this, other);

        public static bool Equals(ExampleUnionA a, ExampleUnionA b)
        {
            if (a.Field != b.Field)
                return false;

            if (a.Field == Fields.Item1)
                return a.Item1 == b.Item1;

            if (a.Field == Fields.Item2)
                return a.Item2 == b.Item2;

            return false;
        }

        public static bool operator ==(ExampleUnionA left, ExampleUnionA right)
            => Equals(left, right);

        public static bool operator !=(ExampleUnionA left, ExampleUnionA right)
            => !Equals(left, right);

        public bool Equals(in ExampleUnionA other)
            => Equals(in this, in other);

        public static bool Equals(in ExampleUnionA a, in ExampleUnionA b)
        {
            if (a.Field != b.Field)
                return false;

            if (a.Field == Fields.Item1)
                return a.Item1 == b.Item1;

            if (a.Field == Fields.Item2)
                return a.Item2 == b.Item2;

            return false;
        }

        public static bool operator ==(in ExampleUnionA left, in ExampleUnionA right)
            => Equals(in left, in right);

        public static bool operator !=(in ExampleUnionA left, in ExampleUnionA right)
            => !Equals(in left, in right);

        public override string ToString()
        {
            if (Field == Fields.Item1)
                return Item1.ToString();

            if (Field == Fields.Item2)
                return Item2.ToString();

            return string.Empty;
        }

        public static implicit operator ExampleUnionA(int value)
            => new ExampleUnionA(value);

        public static implicit operator int(ExampleUnionA value)
            => value.Item1;

        public static implicit operator ExampleUnionA(float value)
            => new ExampleUnionA(value);

        public static implicit operator float(ExampleUnionA value)
            => value.Item2;
    }
}
}
